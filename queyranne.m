function output = queyranne(data, phi_measure, tau, extrapolate)% -----------------------------------------------------------------------% This code uses the Queyranne algorithm to find the system bipartition% that minimizes normalized integrated information. The algorithm is only % guaranteed to work for sub-modular functions (like mutual information),% and has been empirically shown to work fairly well for minimizing% non-normalized integrated information. However, it performs less well in% minimizing normalized integrated information. This code calls on the Submodular% Functional Optimization toolbox, which is courtsey of Krause, A. It is% included in this toolbox and was downloaded here: %% https://www.mathworks.com/matlabcentral/fileexchange/20504-submodular-function-optimization% -----------------------------------------------------------------------n=size(data,1); % number of nodes in the systemF = sfo_fn_wrapper(@(Z) sfo_phi_G(data,Z,tau));A=sfo_queyranne(F,1:n); % run the Queyranne algorithm to find a bipartition that minimizes mutual information % store result in a community assignment vectorpart=ones(1,n); part(A)=2;output = phi_comp(data, part, phi_measure, tau, extrapolate); % compute integrated information across this partition